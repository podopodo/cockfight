<html>
	<head>
		<title>Cock Fight</title>
		<style>
.button {
    background-color: #4CAF50;
    border: none;
    color: white;
    padding: 35px 45px;
    text-align: center;
    font-size: 16px;
    cursor: pointer;
}

.button:hover {
    background-color: green;
}
</style>
	</head>
	<body>
		<div id="revive" style="display:none;position:absolute;"  onclick="revive()">
			<center><br><br><br>
				<h1 style="color:white">Click anywhere to Revive back</h1>
			<!--input type="button" value="REVIVE" onclick="revive()"-->
			</center>
		</div>
		<div id="blocker" style="height:100%; width:100%; background-color:black; display:block; opacity:0.8; position:absolute; z-index:20">
			<div>
				<center>
				<h1 style="color:white">Cock Fight v0.03</h1>
					<div class="alert" id="alert" style="display:block; color:white">Enter Nickname</div><br>
					<input type="text" placeholder="Enter Nickname" id="username"><br>
					<br>
					<!--input type="password" placeholder="Password" id="password" value="password"-->
					<input type="button" value="LOGIN" id="loginbutton" onclick="login()">
				</center>
			</div>
		</div>

		<center>
			<h1>Cock Fight Multiplayer</h1>
		<div id="intro" style="text-align:center">
					<span style="font-size:12px">up=W, left=A, down=S, right=D, jump=SPACE, attack=M<br>
					Keep jumping otherwise you'll lose your life!!!</span>
					<div>You'll be scored with Kills and Deaths</div>
					</div>
					 
		<table><tr><td>
			<div style="z-index:10">
			<canvas id="ctx" width="800" height="500" style="border:1px solid #000000;" onclick="acquired=false;"></canvas>
			</div>
		</td>
		<td rowspan=2>
			<div>
				<h1>CHAT HERE!</h1>
			<div id="chat-text" style="width:500px;height:450px;overflow-y:scroll;">
				<div>
					</div>
			</div>
			<form id="chat-form">
				<input id="chat-input" type="text" style="width:500px">
			</form>
			</div>
		</td></tr>
		<tr><td>
			<div id="controller" style="display:none;">
				You are playing on Phone. Play in Potriat mode. TAP on the ground to calibrate your movements.
			<table style="width:100%;">
				<tr><td align=center>
				<div id="controller-navigation">
				<!--table style="text-align:center;">
					<tr>
						<td></td>
						<td><button type="button" value="UP" class="button"  onmouseover="socket.emit('keyPress',{inputId:'up',state:true})" onmouseout="socket.emit('keyPress',{inputId:'up',state:false})">UP</button></td>
						<td></td>
					</tr>
						<tr>
						<td><button type="button" value="LEFT" class="button"  onmouseover="socket.emit('keyPress',{inputId:'left',state:true})" onmouseout="socket.emit('keyPress',{inputId:'left',state:false})">LEFT</button></td>
						<td></td>
						<td><button type="button" value="RIGHT" class="button"  onmouseover="socket.emit('keyPress',{inputId:'right',state:true})" onmouseout="socket.emit('keyPress',{inputId:'right',state:false})">RIGHT</button></td>
					</tr>
						<tr>
						<td></td>
						<td><button type="button" value="DOWN" class="button"  onmouseover="socket.emit('keyPress',{inputId:'down',state:true})" onmouseout="socket.emit('keyPress',{inputId:'down',state:false})">DOWN</button></td>
						<td></td>
					</tr>
				</table-->
			</div>

		</td><td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp</td><td align=center>
			<div id="controller-attack">
				Tap anywhere to do nothing.
				<table>
					<tr>
						<td><button type="button" value="JUMP" class="button"  onmouseover="socket.emit('keyPress',{inputId:'jump',state:true})" onmouseout="socket.emit('keyPress',{inputId:'jump',state:false})">JUMP</button></td>
						<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp</td>
						<td><button type="button" value="ATTACK" class="button"  onmouseover="socket.emit('keyPress',{inputId:'attack',state:true}); socket.emit('keyPress',{inputId:'jump',state:true})" onmouseout="socket.emit('keyPress',{inputId:'attack',state:false});socket.emit('keyPress',{inputId:'jump',state:false})">ATTACK</button></td>
						</tr>
					</table>
			</div>
			</td></tr>
			</table>
			</div>
		</td><td></td></tr></table>
		</center>

</div>
	</body>
	
	<script src="client/client.socket.io.js">
<!-- script src="https://cdn.socket.io/socket.io-1.4.5.js" -->
</script>
<script>
	//var socket=io();
	
	

	var username="phuntsho";
	var password="password";

	
	fps=30;
	logged=false;
	myid=0;

	socket = io({transports: ['websocket'], upgrade: false});
	document.getElementById('username').value="User"+Math.floor(50*Math.random());
		
	function login() {
		if (document.getElementById('username').value=="") {
			document.getElementById("alert").innerHTML="Nickname cannot be blank";
			return 0;
		}
		socket.emit('login',{username:document.getElementById('username').value});
	}
	
	var random = Math.round(100*Math.random(),0);
	
	function revive() {
		socket.emit('revive',{id:myid});
		//jumpers[myid].revive();
		document.getElementById("revive").style="display:none;position:absolute;";
	}
	
	socket.on('serverMsg',function(data) {
		console.log(data.msg);
	});
	socket.on('serverErrorMsg',function(data) {
		document.getElementById("alert").innerHTML=data.msg;
		logged=data.ok;
		console.log(data.ok);
		if (data.ok) {
			document.getElementById("blocker").style="display:none";
			myid=data.id;

		}
	});
	
	characters=function(number) {
		var self = {
		id : number,
		face : new Image(),
		hair : new Image(),
		hand_left : new Image(),
		hand_right : new Image(),
		leg_left : new Image(),
		leg_right : new Image(),		
		stripe_gho_down : new Image(),
		stripe_gho_up : new Image(),
		pos_hand_right: new Array(),
		pos_leg_left: new Array(),
		pos_leg_right: new Array(),
		pos_stripe_gho_down: new Array(),
		pos_stripe_gho_up: new Array(),
		pos_face: new Array(),
		pos_hand_left: new Array(),
		pos_eye_one: new Array(),
		pos_eye_two: new Array(),
		x:0,
		y:0,
		yy:0,
		jump:0,
		keepjumping:false,
		attack:false,
		jumping:clearInterval(),
		framecount:0,
		color:"white",
		pressingLeft:false,
		pressingRight:false,
		}
		self.initiate= function() {
			self.face.src = "client/character/face.png";
			self.hair.src = "client/character/hair.png";
			self.hand_left.src = "client/character/hand left.png";
			self.hand_right.src = "client/character/hand right.png";
			self.leg_left.src = "client/character/leg left.png";
			self.leg_right.src = "client/character/leg right.png";
			self.stripe_gho_down.src="client/character/body down.png";
			self.stripe_gho_up.src="client/character/body.png";
			self.pos_hand_right=[10,30,30,30];
			self.pos_hand_left=[-20,30,30,30];
			self.pos_leg_left=[0,58,10,30];
			self.pos_leg_right=[15,58,10,30];
			self.pos_stripe_gho_down=[-5,45,30,30];
			self.pos_stripe_gho_up=[-5,25,30,40];
			self.pos_face=[0,6,25,25];		
			self.pos_eye_one=[10,20,8,8];
			self.pos_eye_two=[20,20,8,8];
			
			
		}
		self.jumppic=function() {
			self.hand_left.src = "client/character/jump hand left.png";
			self.hand_right.src = "client/character/jump hand right.png";
			self.leg_left.src = "client/character/jump leg left.png";
			self.leg_right.src = "client/character/jump leg right.png";
			self.stripe_gho_down.src="client/character/body down.png";
			self.stripe_gho_up.src="client/character/body.png";
			self.pos_hand_left=[-6,30,15,30];
			self.pos_hand_right=[-2,30,30,30];
			self.pos_leg_left=[0,58,15,30];
			self.pos_leg_right=[5,48,15,30];
		}
		self.attackpic=function() {
			self.hand_left.src = "client/character/attack hand left.png";
			self.hand_right.src = "client/character/attack hand right.png";
			self.leg_left.src = "client/character/jump leg left.png";
			self.leg_right.src = "client/character/jump leg right.png";
			self.stripe_gho_down.src="client/character/attack body down.png";
			self.stripe_gho_up.src="client/character/attack body.png";
			self.pos_hand_left=[-10,30,15,30];
			self.pos_hand_right=[0,30,30,30];
			self.pos_leg_left=[0,58,15,30];
			self.pos_leg_right=[5,48,15,30];
			self.pos_stripe_gho_down=[-5,47,30,30];
			self.pos_stripe_gho_up=[-5,25,30,40];
		}
		self.walkpic=function(doit) {
			if (self.framecount%4==0 && doit) {
				self.pos_leg_left=[6,58,15,30];
				self.pos_leg_right=[4,48,15,30];
			}
			//else {
			//		self.initiate();
			//	}
			
		}
		self.deadpic=function() {
			self.pos_hand_right=[10,50,0,0];
			self.pos_hand_left=[-20,100,0,0];
			self.pos_leg_left=[0,58,0,0];
			self.pos_leg_right=[15,100,0,0];
			self.pos_stripe_gho_down=[-5,100,0,0];
			self.pos_stripe_gho_up=[-5,100,0,0];
			self.pos_face=[0,65,25,25];		
			self.pos_eye_one=[10,73,8,2];
			self.pos_eye_two=[20,73,8,2];
			clearInterval(self.jumping);
			
		}
		self.revive=function() {
			self.initiate();
			clearInterval(self.jumping);
			self.jumping=setInterval(function() {	
				if (self.jump==0 && !self.keepjumping) {
					self.jump=0;
				}
				else {
						self.jump+=25;
						if (self.jump>=360) {
							self.jump=0;
						}
					}
				
				if (self.keepjumping) {
					self.jumppic();
					if (self.attack)
						self.attackpic();
					}
				else
					self.initiate();
				
				//BLINK
				if (Math.floor(60*Math.random())==10) {
						self.pos_eye_one=[10,20,8,2];
						self.pos_eye_two=[20,20,8,2];
				}
				else {
						self.pos_eye_one=[10,20,8,8];
						self.pos_eye_two=[20,20,8,8];
				}
				
				//breathing
				if (self.framecount<=fps) {
						self.framecount++;
						if (self.framecount<=fps/2) {
							self.pos_hand_left[1]-=0.3;
							self.pos_hand_right[1]-=0.3;
							self.pos_stripe_gho_down[1]-=0.3;
							self.pos_stripe_gho_up[1]-=0.3;
						}
						else {
							self.pos_hand_left[1]+=0.3;
							self.pos_hand_right[1]+=0.3;
							self.pos_stripe_gho_down[1]+=0.3;
							self.pos_stripe_gho_up[1]+=0.3;
						}
					}
				else {
					self.framecount=0;
				}
		
				self.y=self.yy+20*Math.cos(self.jump*Math.PI/180);
			},1000/fps);
		}
		self.updatecoordinate= function(x,y) {
			if ((self.x!=x || self.yy!=y))
				self.walkpic(!self.keepjumping);
			self.x=x;
			self.yy=y;
		
		}
		return self;
	}
	
	
	var ctx = document.getElementById("ctx").getContext("2d");
	ctx.font="20px Arial";
	socket.emit('boundaries',{xmax:ctx.canvas.width-40,ymax:ctx.canvas.height-110,xmin:20,ymin:0});
	var background = new Image();
	background.src = "client/background.jpg";
	
	
	function flipHorizontally(img,x,y,x1,y1){
    // move to x + img's width
    ctx.translate(x+x1,y);

    // scaleX by -1; this "trick" flips horizontally
    ctx.scale(-1,1);
    
    // draw the img
    // no need for x,y since we've already translated
    ctx.drawImage(img,0,0,x1,y1);
    
    // always clean up -- reset transformations to default
    ctx.setTransform(1,0,0,1,0,0);
	}
	function drawEllipse(centerX, centerY, width, height, pcolor) {
	
	  ctx.beginPath();
	  
	  ctx.moveTo(centerX, centerY - height/2);
	  
	  ctx.bezierCurveTo(
	    centerX + width/2, centerY - height/2,
	    centerX + width/2, centerY + height/2,
	    centerX, centerY + height/2);

	  ctx.bezierCurveTo(
	    centerX - width/2, centerY + height/2,
	    centerX - width/2, centerY - height/2,
	    centerX, centerY - height/2);
	 
	  ctx.fillStyle = pcolor;
	  ctx.fill();
	  ctx.closePath();
		}
		
		function draw_shield(player) {
				radius=45;
				ctx.beginPath();
				ctx.arc(player.x+10,player.y+50,radius,0,2*Math.PI,false);
				ctx.lineWidth=2;
				ctx.strokeStyle="gold";
				ctx.stroke();
				ctx.closePath();
			
		}
	
		var draw_character=function (player,ctx) {	//client level changes
			if (player.pressingLeft) {
				ctx.drawImage(player.hand_right,player.x+player.pos_hand_right[0],player.y+player.pos_hand_right[1],player.pos_hand_right[2],player.pos_hand_right[3]);
				ctx.drawImage(player.hand_left,player.x+player.pos_hand_left[0],player.y+player.pos_hand_left[1],player.pos_hand_left[2],player.pos_hand_left[3]);	
								
				flipHorizontally(player.leg_left,player.x+player.pos_leg_left[0],player.y+player.pos_leg_left[1],player.pos_leg_left[2],player.pos_leg_left[3]);	
				flipHorizontally(player.leg_right,player.x+player.pos_leg_right[0],player.y+player.pos_leg_right[1],player.pos_leg_right[2],player.pos_leg_right[3]);
				
				flipHorizontally(player.stripe_gho_down,player.x+player.pos_stripe_gho_down[0]+2,player.y+player.pos_stripe_gho_down[1],player.pos_stripe_gho_down[2],player.pos_stripe_gho_down[3]);
				flipHorizontally(player.stripe_gho_up,player.x+player.pos_stripe_gho_up[0]+2,player.y+player.pos_stripe_gho_up[1],player.pos_stripe_gho_up[2],player.pos_stripe_gho_up[3]);
				//draw_shield(player);
				flipHorizontally(player.face,player.x+player.pos_face[0],player.y+player.pos_face[1],player.pos_face[2],player.pos_face[3]);
				//ctx.drawImage(player.hair,player.x-8,player.y-4,40,25);
				
				drawEllipse(player.x+player.pos_eye_one[0],player.y+player.pos_eye_one[1]-1,30,7,player.color);
				
				drawEllipse(player.x+player.pos_eye_one[0]-4,player.y+player.pos_eye_one[1],player.pos_eye_one[2],player.pos_eye_one[3],"black");
				drawEllipse(player.x+player.pos_eye_two[0]-4,player.y+player.pos_eye_two[1],player.pos_eye_two[2],player.pos_eye_two[3],"black");
				
			}
		else {
			ctx.drawImage(player.hand_right,player.x+player.pos_hand_right[0],player.y+player.pos_hand_right[1],player.pos_hand_right[2],player.pos_hand_right[3]);
			ctx.drawImage(player.hand_left,player.x+player.pos_hand_left[0],player.y+player.pos_hand_left[1],player.pos_hand_left[2],player.pos_hand_left[3]);	
							
			ctx.drawImage(player.leg_left,player.x+player.pos_leg_left[0],player.y+player.pos_leg_left[1],player.pos_leg_left[2],player.pos_leg_left[3]);	
			ctx.drawImage(player.leg_right,player.x+player.pos_leg_right[0],player.y+player.pos_leg_right[1],player.pos_leg_right[2],player.pos_leg_right[3]);
			
			ctx.drawImage(player.stripe_gho_down,player.x+player.pos_stripe_gho_down[0],player.y+player.pos_stripe_gho_down[1],player.pos_stripe_gho_down[2],player.pos_stripe_gho_down[3]);
			ctx.drawImage(player.stripe_gho_up,player.x+player.pos_stripe_gho_up[0],player.y+player.pos_stripe_gho_up[1],player.pos_stripe_gho_up[2],player.pos_stripe_gho_up[3]);
			//draw_shield(player);
			ctx.drawImage(player.face,player.x+player.pos_face[0],player.y+player.pos_face[1],player.pos_face[2],player.pos_face[3]);
			//ctx.drawImage(player.hair,player.x-8,player.y-4,40,25);
			
			drawEllipse(player.x+player.pos_eye_one[0]+4,player.y+player.pos_eye_one[1]-1,30,7,player.color);
			drawEllipse(player.x+player.pos_eye_one[0],player.y+player.pos_eye_one[1],player.pos_eye_one[2],player.pos_eye_one[3],"black");
			drawEllipse(player.x+player.pos_eye_two[0],player.y+player.pos_eye_two[1],player.pos_eye_two[2],player.pos_eye_two[3],"black");
		}
	}
	jumpers={};
	jumping=true;
	
	var drawplayer=function(player) { //server synced changes
			if (!jumpers[player.id]) {
					if (player.dead) {
						//console.log("Plyawer dead found");
					 	return false;
					}
				jumpers[player.id]=characters(player.id);
				jumpers[player.id].initiate();
				jumpers[player.id].revive();
			}
			if (player.pressingRight==false && player.pressingLeft==false)
					jumpers[player.id].pressingLeft=jumpers[player.id].pressingLeft;
			else
					jumpers[player.id].pressingLeft=player.pressingLeft;
			drawEllipse(player.x+10,player.y+108,50,6,"black");
			jumpers[player.id].color=player.color;
			ctx.font="15px Arial";
			ctx.fillText(player.name,player.x-(player.name.length*3),player.y-2);
			ctx.fillRect(player.x-16,player.y+10,player.maxlife*5+2,12);
			ctx.fillStyle ="white";
			ctx.fillRect(player.x-15,player.y+11,player.maxlife*5,10);		
			ctx.fillStyle = "black";
			ctx.font="11px Arial";
			ctx.fillStyle = "red";
			if (player.dead) {
				ctx.fillText("Dead",player.x-15,player.y+20);
				jumpers[player.id].deadpic();
				if (player.id==myid) {
					if (document.getElementById("revive").style.length<70)
					document.getElementById("revive").style="height:100%; width:100%;background-color:black; display:block; opacity:0.8; position:absolute; z-index:20";
				}
			}
			else {
				//jumpers[player.id].revive();
				ctx.fillStyle = "red";
				ctx.fillRect(player.x-15,player.y+11,player.life*5,10);
				ctx.fillStyle = "blue";
				ctx.fillRect(player.x-15,player.y+21,player.mana*5,3);
				
				if (!player.jumped) {
					ctx.fillStyle = "black";
					ctx.font="10px Arial"; //Reducing life in
					ctx.fillText(""+player.restTime,player.x+8,player.y+20);
				}
				
			}
			if (player.invulnerable) {
					draw_shield(jumpers[player.id]);
			}
				//
				ctx.font="11px Arial";
				ctx.fillStyle = "blue";
				ctx.fillText("K: "+player.score,player.x-13,player.y+10);
				ctx.fillText("D: "+player.death,player.x+16,player.y+10);
				jumpers[player.id].updatecoordinate(player.x,player.y);
				jumpers[player.id].keepjumping=player.jumped;
				jumpers[player.id].attack=player.attack;
				draw_character(jumpers[player.id],ctx);
		
		}	
		
	socket.on('revive_user',function(data) {
		jumpers[data.id].revive();
		console.log("reviving "+data.id);
	});
	
	socket.on('newPositions',function(data) {
		//console.log("Received Update")
		if (!logged)
			return 0;
		ctx.clearRect(0,0,500,500);
		ctx.drawImage(background,0,0);
		ctx.fillStyle = "black";

		var tempindex=0;	
		for (var i = 0; i<data.player.length; i++) {
			if (data.player[i].id==myid) { // skipping. to be drawn over others for the current player.
				tempindex=i;
				continue;
			}
			if (data.player[i].draw) {
				drawplayer(data.player[i]);
			}
			//console.log(data.player[i].jumped);
		}
		if (data.player[tempindex].draw) {
			drawplayer(data.player[tempindex]);	
		}	
		/*for (var i = 0; i< data.bullet.length; i++) {
			ctx.fillRect(data.bullet[i].x-5,data.bullet[i].y-5,10,10);
		}*/
	});
	
	document.onkeydown = function(event) {
		if (!logged)
			return 0;
		//console.log(event.keyCode);
		if(event.keyCode === 68) //d
			socket.emit('keyPress',{inputId:'right',state:true});
		else if(event.keyCode === 83) //s
			socket.emit('keyPress',{inputId:'down',state:true});
		else if(event.keyCode === 65) { //a  
			socket.emit('keyPress',{inputId:'left',state:true});
		}
		else if(event.keyCode === 87) //w
			socket.emit('keyPress',{inputId:'up',state:true});
		else if(event.keyCode === 32) //spacebar 
			socket.emit('keyPress',{inputId: 'jump', state:true});
		else if(event.keyCode === 77) //m
			socket.emit('keyPress',{inputId: 'attack',state:true});
		}
		
	document.onkeyup = function(event) {
		if (!logged)
			return 0;
		//console.log(event.keyCode);
		if(event.keyCode === 68) //d
			socket.emit('keyPress',{inputId:'right',state:false});
		else if(event.keyCode === 83) //s
			socket.emit('keyPress',{inputId:'down',state:false});
		else if(event.keyCode === 65) { //a
			socket.emit('keyPress',{inputId:'left',state:false});
		}
		else if(event.keyCode === 87) //w
			socket.emit('keyPress',{inputId:'up',state:false});
		else if(event.keyCode === 32) //spacebar 
			socket.emit('keyPress',{inputId: 'jump',state:false});
		else if(event.keyCode === 77) //m
			socket.emit('keyPress',{inputId: 'attack',state:false});
		}
	
	/*
	document.onmousedown = function(event) {
		//if(event.button === 0) //up //40 down // 39 right // 37 left
			socket.emit('keyPress',{inputId: 'jump', state:true});
			console.log("MOUSE DOWN");
		}
	document.onmouseup = function(event) {
		//if(event.button === 0) //up //40 down // 39 right // 37 left
			socket.emit('keyPress',{inputId: 'jump', state:false});
			console.log("MOUSE UP");
		}
		*/
		
			
	var chatText = document.getElementById('chat-text');
	var chatInput = document.getElementById('chat-input');
	var chatForm = document.getElementById('chat-form');
	
	socket.on('addHistoryChat',function(data) {
		chatText.innerHTML+=data+"<div><hr></div>";
		chatText.scrollTop=chatText.scrollHeight;
	});
	
	socket.on('addToChat',function(data) {
		chatText.innerHTML+='<div>'+data+'</div>';
		chatText.scrollTop=chatText.scrollHeight;
	});
	
	chatForm.onsubmit = function(e) {
		e.preventDefault(); //prevents reloading when pressing Enter
		socket.emit('sendMsgToServer',chatInput.value);
		chatInput.value="";
	}	
	


</script>
<script>
	//avoiding touchzoom in mobile
	document.body.addEventListener('touchmove', function(e) { e.preventDefault(); window.scrollTo(0,1); }, false);
	//detecting if its mobile
	window.mobileAndTabletcheck = function() {
	  var check = false;
	  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
	  return check;
	};
	if (window.mobileAndTabletcheck()) { // IF ITS A MOBILE
			document.getElementById('controller').style="display:block";
	
	acquired=false;	
	initialposx=0;
	initialposy=0;
	initialposz=0;
	
	tolerance=1;	
			
	window.ondevicemotion = function(event) {
	var accelerationX = event.accelerationIncludingGravity.x;
	var accelerationY = event.accelerationIncludingGravity.y;
	var accelerationZ = event.accelerationIncludingGravity.z;
	if (!acquired) {
		initialposx=event.accelerationIncludingGravity.x;
		initialposy=event.accelerationIncludingGravity.y;
		initialposz=event.accelerationIncludingGravity.z;	
		//socket.emit('sendMsgToServer',"x:"+initialposx+",y:"+initialposy+",z:"+initialposz);
	}
	else {
		if (initialposx>-1 && initialposx<1) {
				if (initialposx>event.accelerationIncludingGravity.x+tolerance)
					socket.emit('keyPress',{inputId:'right',state:true});
				else if (initialposx<event.accelerationIncludingGravity.x-tolerance)
					socket.emit('keyPress',{inputId:'left',state:true});
				else if (initialposy>event.accelerationIncludingGravity.y+tolerance)
					socket.emit('keyPress',{inputId:'up',state:true});
				else if (initialposy<event.accelerationIncludingGravity.y-tolerance)
					socket.emit('keyPress',{inputId:'down',state:true});
				else {
					socket.emit('keyPress',{inputId:'right',state:false});
					socket.emit('keyPress',{inputId:'left',state:false});
					socket.emit('keyPress',{inputId:'down',state:false});
					socket.emit('keyPress',{inputId:'up',state:false});
					//acquired=false;
				}
			}
		else {
				if (initialposy>event.accelerationIncludingGravity.y+tolerance)
					socket.emit('keyPress',{inputId:'left',state:true});
				else if (initialposy<event.accelerationIncludingGravity.y-tolerance)
					socket.emit('keyPress',{inputId:'right',state:true});
				else if (initialposx>event.accelerationIncludingGravity.x+tolerance)
					socket.emit('keyPress',{inputId:'up',state:true});
				else if (initialposx<event.accelerationIncludingGravity.x-tolerance)
					socket.emit('keyPress',{inputId:'down',state:true});
				else {
					socket.emit('keyPress',{inputId:'right',state:false});
					socket.emit('keyPress',{inputId:'left',state:false});
					socket.emit('keyPress',{inputId:'down',state:false});
					socket.emit('keyPress',{inputId:'up',state:false});
					//acquired=false;
				}
			}
		
	}
	acquired=true;
	}
	
	window.ondevicemotion();
	}
</script>
</html>

